apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'

buildscript {
    ext {
        VERSION = '0.1'

        kotlin_version = '1.2.61'
        kluent_version = '1.40'
        junit_version = '5.2.0'
        bintray_version = '1.8.4'
        dokka_version = '0.9.17'

        kotlin_core = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        kotlin_reflection = "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        junit_api = "org.junit.jupiter:junit-jupiter-api:$junit_version"
        junit_engine = "org.junit.jupiter:junit-jupiter-engine:$junit_version"
        kluent = "org.amshove.kluent:kluent:$kluent_version"
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }

    repositories {
        jcenter()
    }
}

repositories {
    jcenter()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

dokka {
    moduleName = 'korm'
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    jdkVersion = 8
    includeNonPublic = false
}

// Source Set

sourceSets {
    main {
        java.srcDir 'src/main/kotlin'
    }
    testUtils {
        java.srcDir 'src/testUtils/kotlin'
        compileClasspath = sourceSets.main.output
        runtimeClasspath = output + compileClasspath
    }
    test {
        java.srcDir 'src/test/kotlin'
        compileClasspath += sourceSets.testUtils.output
        runtimeClasspath += sourceSets.testUtils.output
    }
    integrationTest {
        java.srcDir 'src/integrationTest/kotlin'
        compileClasspath += sourceSets.main.output + sourceSets.testUtils.output + configurations.integrationTestCompile
        runtimeClasspath += output + compileClasspath + sourceSets.testUtils.output + configurations.integrationTestRuntime
    }
}

configurations {
    integrationTestCompile.extendsFrom compile, testCompile
    integrationTestRuntime.extendsFrom runtime, testRuntime, integrationTestCompile
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.kotlin.srcDirs
        testSourceDirs += sourceSets.testUtils.kotlin.srcDirs
    }
}

task integrationTest(type: Test) {
    description = "Runs the integration tests (located in src/integrationTest/...)."
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

dependencies {
    implementation kotlin_core
    implementation kotlin_reflection

    testImplementation junit_api
    testRuntimeOnly junit_engine
    testImplementation kluent

    integrationTestImplementation junit_api
    integrationTestRuntimeOnly junit_engine
    integrationTestImplementation kluent
}

// Publishing

version = VERSION

task sourcesJar(type: Jar, dependsOn: classes) {
    description = "Builds the sources.jar archive for publishing."
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    description = "Builds the javadoc.jar archive for publishing."
    classifier = 'javadoc'
    from dokka.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Spftware License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "michaelfoidl"
            name "Michael Foidl"
        }
    }

    scm {
        url "https://gitlab.com/michaelfoidl/korm.git"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'at.michaelfoidl'
            artifactId 'korm'
            version VERSION
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'An OR-Mapper for Kotlin.')
                root.appendNode('name', 'korm')
                root.appendNode('url', 'https://gitlab.com/michaelfoidl/korm')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['mavenPublication']
    publish = true
    pkg {
        repo = 'korm'
        name = 'korm'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://gitlab.com/michaelfoidl/korm.git'
        version {
            name = VERSION
            desc = "korm library version $VERSION"
            released = new Date()
        }
    }
}