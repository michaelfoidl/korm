/*
 * korm
 *
 * Copyright (c) 2018, Michael Foidl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package at.michaelfoidl.korm.core.runtime

import at.michaelfoidl.korm.core.io.IOOracle
import at.michaelfoidl.korm.interfaces.Database
import at.michaelfoidl.korm.interfaces.KormConfiguration
import at.michaelfoidl.korm.interfaces.Migration
import org.jetbrains.exposed.sql.Table
import java.io.File
import kotlin.reflect.KClass

internal class ClassFetcher(
        private val configuration: KormConfiguration
) {
    // TODO work out concept for which files go where (migrations should be checked in, database implementations should probably not be checked in). Also, files generated by the tests should never be checked in.

    fun fetchTable(entityClass: KClass<*>): Table {
        val tableQualifiedName = "${IOOracle.getTablePackage(this.configuration)}.${IOOracle.getTableName(entityClass)}"
        return ClassLoader(File(IOOracle.getTableFolderPath(this.configuration)), true)
                .objectInstance<Table>(tableQualifiedName)!!
    }

    fun fetchMigration(databaseName: String, version: Long): Migration {
        val migrationQualifiedName= "${IOOracle.getMigrationPackage(this.configuration)}.${IOOracle.getMigrationName(databaseName, version)}"
        return ClassLoader(File(IOOracle.getMigrationFolderPath(this.configuration) + "/"), true)
                .createInstance<Migration>(migrationQualifiedName)!!
    }

    inline fun <reified T : Database> fetchDatabase(databaseName: String, version: Long): T {
        val databaseQualifiedName = "${IOOracle.getDatabasePackage(this.configuration)}.${IOOracle.getDatabaseName(databaseName, version)}"
        return ClassLoader(File(IOOracle.getDatabaseFolderPath(this.configuration) + "/"), true)
                .createInstance<T>(databaseQualifiedName)!!
    }
}