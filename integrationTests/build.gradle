apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'
//apply plugin: 'at.michaelfoidl.korm'

sourceSets {
    generated {
        java.srcDir 'src/generated/kotlin'

        compileClasspath += sourceSets.main.output
        compileClasspath += configurations.generatedCompile

        runtimeClasspath += output
        runtimeClasspath += compileClasspath
        runtimeClasspath += configurations.generatedRuntime
    }
    testUtils {
        java.srcDir 'src/testUtils/kotlin'

        compileClasspath += sourceSets.main.output
        compileClasspath += configurations.testUtilsCompile

        runtimeClasspath += output
        runtimeClasspath += compileClasspath
        runtimeClasspath += configurations.testUtilsRuntime
    }
    test {
        java.srcDir 'src/test/kotlin'

        compileClasspath += sourceSets.main.output
        compileClasspath += sourceSets.testUtils.output
        compileClasspath += sourceSets.generated.output
        compileClasspath += configurations.testUtilsCompile
        compileClasspath += configurations.generatedCompile

        runtimeClasspath += output
        runtimeClasspath += compileClasspath
        runtimeClasspath += configurations.testUtilsRuntime
        runtimeClasspath += configurations.generatedRuntime
    }
}

dependencies {
    implementation kotlin_core
    implementation exposed

    testImplementation junit_api
    testRuntimeOnly junit_engine
    testImplementation kluent
    testImplementation project(':testUtils')

    compileOnly project(':annotations')
    kapt project(':processor')
    compile project(':core')
}

configurations {
    testUtilsCompile.extendsFrom compile
    testUtilsRuntime.extendsFrom runtime, testUtilsCompile
    generatedCompile.extendsFrom compile
    generatedRuntime.extendsFrom runtime, generatedCompile
}

idea {
    module {
        testSourceDirs += sourceSets.testUtils.kotlin.srcDirs
        scopes.TEST.plus += [configurations.testUtilsCompile, configurations.testUtilsRuntime]
        generatedSourceDirs += sourceSets.generated.java.srcDirs
    }
}

test {
    onlyIf {
        false
    }
}

task integrationTest(type: Test) {
    description = "Runs the integration tests (located in src/test/...)."
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task cleanTestTmp(type: Delete) {
    doFirst {
        delete "$buildDir/tmp/test"
    }
}

integrationTest.dependsOn(cleanTestTmp)

def kormProperties = new Properties()
file("src/main/resources/korm.properties").withInputStream {
    stream -> kormProperties.load(stream)
}

def databaseProperties = new Properties()
file("src/main/resources/at.michaelfoidl.korm.integrationTests.database.TestDatabaseV1.properties").withInputStream {
    stream -> databaseProperties.load(stream)
}

kapt {
    arguments {
        arg("kapt.korm.kormPackage", kormProperties['at.michaelfoidl.korm.kormPackage'])
        arg("kapt.korm.migrationPackage", kormProperties['at.michaelfoidl.korm.migrationPackage'])
        arg("kapt.korm.srcDir", kormProperties['at.michaelfoidl.korm.srcDir'])
        arg("kapt.korm.buildDir", kormProperties['at.michaelfoidl.korm.buildDir'])
        arg("kapt.korm.databaseName", databaseProperties['at.michaelfoidl.korm.databaseName'])
        arg("kapt.korm.databaseVersion", databaseProperties['at.michaelfoidl.korm.databaseVersion'])
        arg("kapt.korm.username", databaseProperties['at.michaelfoidl.korm.username'])
        arg("kapt.korm.password", databaseProperties['at.michaelfoidl.korm.password'])
    }
}

